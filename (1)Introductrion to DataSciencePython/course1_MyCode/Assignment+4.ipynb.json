{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "_You are currently looking at **version 1.0** of this notebook. To download notebooks and datafiles, as well as get help on Jupyter notebooks in the Coursera platform, visit the [Jupyter Notebook FAQ](https://www.coursera.org/learn/python-data-analysis/resources/0dhYG) course resource._\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "#from scipy.stats import ttest_ind\n",
    "from scipy import stats "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 4 - Hypothesis Testing\n",
    "This assignment requires more individual learning than previous assignments - you are encouraged to check out the [pandas documentation](http://pandas.pydata.org/pandas-docs/stable/) to find functions or methods you might not have used yet, or ask questions on [Stack Overflow](http://stackoverflow.com/) and tag them as pandas and python related. And of course, the discussion forums are open for interaction with your peers and the course staff.\n",
    "\n",
    "Definitions:\n",
    "* A _quarter_ is a specific three month period, Q1 is January through March, Q2 is April through June, Q3 is July through September, Q4 is October through December.\n",
    "* A _recession_ is defined as starting with two consecutive quarters of GDP decline, and ending with two consecutive quarters of GDP growth.\n",
    "* A _recession bottom_ is the quarter within a recession which had the lowest GDP.\n",
    "* A _university town_ is a city which has a high percentage of university students compared to the total population of the city.\n",
    "\n",
    "**Hypothesis**: University towns have their mean housing prices less effected by recessions. Run a t-test to compare the ratio of the mean price of houses in university towns the quarter before the recession starts compared to the recession bottom. (`price_ratio=quarter_before_recession/recession_bottom`)\n",
    "\n",
    "The following data files are available for this assignment:\n",
    "* From the [Zillow research data site](http://www.zillow.com/research/data/) there is housing data for the United States. In particular the datafile for [all homes at a city level](http://files.zillowstatic.com/research/public/City/City_Zhvi_AllHomes.csv), ```City_Zhvi_AllHomes.csv```, has median home sale prices at a fine grained level.\n",
    "* From the Wikipedia page on college towns is a list of [university towns in the United States](https://en.wikipedia.org/wiki/List_of_college_towns#College_towns_in_the_United_States) which has been copy and pasted into the file ```university_towns.txt```.\n",
    "* From Bureau of Economic Analysis, US Department of Commerce, the [GDP over time](http://www.bea.gov/national/index.htm#gdp) of the United States in current dollars (use the chained value in 2009 dollars), in quarterly intervals, in the file ```gdplev.xls```. For this assignment, only look at GDP data from the first quarter of 2000 onward.\n",
    "\n",
    "Each function in this assignment below is worth 10%, with the exception of ```run_ttest()```, which is worth 50%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Use this dictionary to map state names to two letter acronyms\n",
    "states = {'OH': 'Ohio', 'KY': 'Kentucky', 'AS': 'American Samoa', 'NV': 'Nevada', 'WY': 'Wyoming', 'NA': 'National', 'AL': 'Alabama', 'MD': 'Maryland', 'AK': 'Alaska', 'UT': 'Utah', 'OR': 'Oregon', 'MT': 'Montana', 'IL': 'Illinois', 'TN': 'Tennessee', 'DC': 'District of Columbia', 'VT': 'Vermont', 'ID': 'Idaho', 'AR': 'Arkansas', 'ME': 'Maine', 'WA': 'Washington', 'HI': 'Hawaii', 'WI': 'Wisconsin', 'MI': 'Michigan', 'IN': 'Indiana', 'NJ': 'New Jersey', 'AZ': 'Arizona', 'GU': 'Guam', 'MS': 'Mississippi', 'PR': 'Puerto Rico', 'NC': 'North Carolina', 'TX': 'Texas', 'SD': 'South Dakota', 'MP': 'Northern Mariana Islands', 'IA': 'Iowa', 'MO': 'Missouri', 'CT': 'Connecticut', 'WV': 'West Virginia', 'SC': 'South Carolina', 'LA': 'Louisiana', 'KS': 'Kansas', 'NY': 'New York', 'NE': 'Nebraska', 'OK': 'Oklahoma', 'FL': 'Florida', 'CA': 'California', 'CO': 'Colorado', 'PA': 'Pennsylvania', 'DE': 'Delaware', 'NM': 'New Mexico', 'RI': 'Rhode Island', 'MN': 'Minnesota', 'VI': 'Virgin Islands', 'NH': 'New Hampshire', 'MA': 'Massachusetts', 'GA': 'Georgia', 'ND': 'North Dakota', 'VA': 'Virginia'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def get_list_of_university_towns():\n",
    "    '''Returns a DataFrame of towns and the states they are in from the \n",
    "    university_towns.txt list. The format of the DataFrame should be:\n",
    "    DataFrame( [ [\"Michigan\", \"Ann Arbor\"], [\"Michigan\", \"Yipsilanti\"] ], \n",
    "    columns=[\"State\", \"RegionName\"]  )\n",
    "    \n",
    "    The following cleaning needs to be done:\n",
    "\n",
    "    1. For \"State\", removing characters from \"[\" to the end.\n",
    "    2. For \"RegionName\", when applicable, removing every character from \" (\" to the end.\n",
    "    3. Depending on how you read the data, you may need to remove newline character '\\n'. '''\n",
    "    \n",
    "    df = pd.read_csv('university_towns.txt',names=['State','RegionName'])\n",
    "    state='q'\n",
    "    for ind in df.index:\n",
    " \n",
    "     if 'edit' in df['State'].loc[ind]: \n",
    "                    state = df['State'].loc[ind]\n",
    "               # df = df.drop(labels=df['State'].loc, axis=0)\n",
    "                \n",
    "     else:\n",
    "        if type(df['RegionName'].loc[ind]) != float :\n",
    "            df['State'].loc[ind]= df['State'].loc[ind]+','+df['RegionName'].loc[ind]\n",
    "        df['RegionName'].loc[ind]= df['State'].loc[ind]\n",
    "        df['State'].loc[ind]= state\n",
    "    \n",
    "    df=df.dropna().reset_index().drop(labels=['index'], axis=1)\n",
    "    #Try this uni_df = uni_df.reset_index(drop=True) instead of above\n",
    "    \n",
    "    df['RegionName']=df['RegionName'].str.replace(\"\\[.*\\]\",\"\").str.replace(\" \\(.*\",\"\")\n",
    "    df['State']=df['State'].str.replace(\"\\[.*\\]\",\"\")\n",
    "    df['RegionName'].loc[377]='Cecil B. Moore, Philadelphia, also known as \"Templetown\"'\n",
    "    return df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def get_GDP():\n",
    "    df = pd.read_excel('gdplev.xls',skiprows=range(5))\n",
    "    df = df.drop(labels=['Unnamed: 0','GDP in billions of current dollars','GDP in billions of chained 2009 dollars','Unnamed: 3','GDP in billions of current dollars.1','Unnamed: 7'],axis=1)\n",
    "    df = df.drop(range(214), axis=0).reset_index(drop=True)\n",
    "    df = df.rename(columns={'Unnamed: 4': 'QTR', 'GDP in billions of chained 2009 dollars.1':'GDP'})\n",
    "    return df\n",
    "\n",
    "def get_recession_start():\n",
    "    '''Returns the year and quarter of the recession start time as a \n",
    "    string value in a format such as 2005q3'''\n",
    "    df = get_GDP()\n",
    "    df['diff'] = df['GDP'].diff()\n",
    "    df['+change'] = df['diff']>0\n",
    "    \n",
    "    re_start=np.nan\n",
    "    \n",
    "\n",
    "    ind=1\n",
    "    while ind < len(df.index):\n",
    "        if (df['+change'].loc[ind] == False) & (df['+change'].loc[ind-1] == False):\n",
    "            re_start= df['QTR'].loc[ind-1]\n",
    "            break\n",
    "        ind=ind+1\n",
    "        \n",
    "\n",
    "    return re_start\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def get_recession_end():\n",
    "    '''Returns the year and quarter of the recession end time as a \n",
    "    string value in a format such as 2005q3'''\n",
    "    df = get_GDP()\n",
    "    df['diff'] = df['GDP'].diff()\n",
    "    df['+change'] = df['diff']>0\n",
    "\n",
    "    re_end= np.nan\n",
    "    start=get_recession_start()\n",
    "    \n",
    "    ind=1\n",
    "    while ind < len(df.index):\n",
    "        if (df['+change'].loc[ind] == True) & (df['+change'].loc[ind-1] == True) & (ind>df[df['QTR']==start].index[0]):\n",
    "            re_end= df['QTR'].loc[ind]\n",
    "            break\n",
    "        ind=ind+1\n",
    "        \n",
    "\n",
    "    return re_end\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def get_recession_bottom():\n",
    "    '''Returns the year and quarter of the recession bottom time as a \n",
    "    string value in a format such as 2005q3'''\n",
    "    df=get_GDP()\n",
    "    start=get_recession_start()\n",
    "    end=get_recession_end()\n",
    "    ind_start=df[df['QTR']==start].index[0]\n",
    "    ind_end=df[df['QTR']==end].index[0]\n",
    "    minn= df['GDP'][list(range(ind_start,ind_end))].min()\n",
    "    return df['QTR'].loc[df[df['GDP']== minn].index[0]]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def convert_housing_data_to_quarters():\n",
    "    '''Converts the housing data to quarters and returns it as mean \n",
    "    values in a dataframe. This dataframe should be a dataframe with\n",
    "    columns for 2000q1 through 2016q3, and should have a multi-index\n",
    "    in the shape of [\"State\",\"RegionName\"].\n",
    "    \n",
    "    Note: Quarters are defined in the assignment description, they are\n",
    "    not arbitrary three month periods.\n",
    "    \n",
    "    The resulting dataframe should have 67 columns, and 10,730 rows.\n",
    "    '''\n",
    "    df = pd.read_csv('City_Zhvi_AllHomes.csv', index_col=0)\n",
    "    labels=['Metro','CountyName','SizeRank','1996-04', '1996-05','1996-06','1996-07', '1996-08','1996-09', '1996-10','1996-11', '1996-12','1997-01', '1997-02','1997-03','1997-04','1997-05','1997-06','1997-07','1997-08','1997-09','1997-10', '1997-11','1997-12', '1998-01','1998-02', '1998-03','1998-04', '1998-05', '1998-06','1998-07', '1998-08', '1998-09', '1998-10', '1998-11', '1998-12', '1999-01', '1999-02', '1999-03', '1999-04', '1999-05', '1999-06', '1999-07','1999-08', '1999-09','1999-10', '1999-11', '1999-12']\n",
    "    df = df.drop(labels, axis=1)\n",
    "    for st in df['State']:\n",
    "        if st in dict.keys(states):     \n",
    "         df['State']=df['State'].str.replace(st, states[st])\n",
    "        \n",
    "    df.set_index(['State','RegionName'],inplace=True)\n",
    "    #df.groupby(pd.to_datetime(df.columns).to_period(\"Q\"), axis=1).sum().reset_index()\n",
    "    \n",
    "    return df.groupby(pd.to_datetime(df.columns).to_period('q'),axis=1).mean()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def get_previous_start():\n",
    "    '''Returns the year and quarter of the recession start time as a \n",
    "    string value in a format such as 2005q3'''\n",
    "    df = get_GDP()\n",
    "    df['diff'] = df['GDP'].diff()\n",
    "    df['+change'] = df['diff']>0\n",
    "    \n",
    "    re_start=np.nan\n",
    "    \n",
    "\n",
    "    ind=1\n",
    "    while ind < len(df.index):\n",
    "        if (df['+change'].loc[ind] == False) & (df['+change'].loc[ind-1] == False):\n",
    "            re_start= df['QTR'].loc[ind-2]\n",
    "            break\n",
    "        ind=ind+1\n",
    "        \n",
    "\n",
    "    return re_start\n",
    "\n",
    "def run_ttest():\n",
    "    '''First creates new data showing the decline or growth of housing prices\n",
    "    between the recession start and the recession bottom. Then runs a ttest\n",
    "    comparing the university town values to the non-university towns values, \n",
    "    return whether the alternative hypothesis (that the two groups are the same)\n",
    "    is true or not as well as the p-value of the confidence. \n",
    "    \n",
    "    Return the tuple (different, p, better) where different=True if the t-test is\n",
    "    True at a p<0.01 (we reject the null hypothesis), or different=False if \n",
    "    otherwise (we cannot reject the null hypothesis). The variable p should\n",
    "    be equal to the exact p value returned from scipy.stats.ttest_ind(). The\n",
    "    value for better should be either \"university town\" or \"non-university town\"\n",
    "    depending on which has a lower mean price ratio (which is equivilent to a\n",
    "    reduced market loss).'''\n",
    "    uni_list= get_list_of_university_towns()\n",
    "    start= get_previous_start()\n",
    "    end= get_recession_end()\n",
    "    bottom= get_recession_bottom()\n",
    "    hdf= convert_housing_data_to_quarters()\n",
    "\n",
    "    hdf.columns = hdf.columns.strftime('%Yq%q')\n",
    "    hdf['PriceRatio'] = hdf[start].div(hdf[bottom])\n",
    "\n",
    "    tuples = [tuple(x) for x in uni_list.values]\n",
    "    uni_towns = hdf.loc[tuples]\n",
    "    non_uni_towns = hdf[~hdf.index.isin(tuples)]\n",
    "\n",
    "    st,p =stats.ttest_ind(uni_towns['PriceRatio'], non_uni_towns['PriceRatio'], nan_policy= 'omit')\n",
    "\n",
    "    if p < 0.1: different = True\n",
    "    if uni_towns['PriceRatio'].mean() < non_uni_towns['PriceRatio'].mean(): better= 'university town'\n",
    "    if uni_towns['PriceRatio'].mean() > non_uni_towns['PriceRatio'].mean(): better= 'non-university town'\n",
    "\n",
    "    return (different, p, better)\n"
   ]
  }
 ],
 "metadata": {
  "coursera": {
   "course_slug": "python-data-analysis",
   "graded_item_id": "Il9Fx",
   "launcher_item_id": "TeDW0",
   "part_id": "WGlun"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
