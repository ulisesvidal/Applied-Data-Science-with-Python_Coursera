{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "_You are currently looking at **version 1.4** of this notebook. To download notebooks and datafiles, as well as get help on Jupyter notebooks in the Coursera platform, visit the [Jupyter Notebook FAQ](https://www.coursera.org/learn/python-data-analysis/resources/0dhYG) course resource._\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 3 - More Pandas\n",
    "All questions are weighted the same in this assignment. This assignment requires more individual learning then the last one did - you are encouraged to check out the [pandas documentation](http://pandas.pydata.org/pandas-docs/stable/) to find functions or methods you might not have used yet, or ask questions on [Stack Overflow](http://stackoverflow.com/) and tag them as pandas and python related. And of course, the discussion forums are open for interaction with your peers and the course staff."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 1 (20%)\n",
    "Load the energy data from the file `Energy Indicators.xls`, which is a list of indicators of [energy supply and renewable electricity production](Energy%20Indicators.xls) from the [United Nations](http://unstats.un.org/unsd/environment/excel_file_tables/2013/Energy%20Indicators.xls) for the year 2013, and should be put into a DataFrame with the variable name of **energy**.\n",
    "\n",
    "Keep in mind that this is an Excel file, and not a comma separated values file. Also, make sure to exclude the footer and header information from the datafile. The first two columns are unneccessary, so you should get rid of them, and you should change the column labels so that the columns are:\n",
    "\n",
    "`['Country', 'Energy Supply', 'Energy Supply per Capita', '% Renewable]`\n",
    "\n",
    "Convert `Energy Supply` to gigajoules (there are 1,000,000 gigajoules in a petajoule). For all countries which have missing data (e.g. data with \"...\") make sure this is reflected as `np.NaN` values.\n",
    "\n",
    "Rename the following list of countries (for use in later questions):\n",
    "\n",
    "```\"Republic of Korea\": \"South Korea\",\n",
    "\"United States of America\": \"United States\",\n",
    "\"United Kingdom of Great Britain and Northern Ireland\": \"United Kingdom\",\n",
    "\"China, Hong Kong Special Administrative Region\": \"Hong Kong\"```\n",
    "\n",
    "There are also several countries with numbers and/or parenthesis in their name. Be sure to remove these, e.g. `'Bolivia (Plurinational State of)'` should be `'Bolivia'`.\n",
    "\n",
    "<br>\n",
    "\n",
    "Next, load the GDP data from the file `world_bank.csv`, which is a csv containing countries' GDP from 1960 to 2015 from [World Bank](http://data.worldbank.org/indicator/NY.GDP.MKTP.CD). Call this DataFrame **GDP**. \n",
    "\n",
    "Make sure to skip the header, and rename the following list of countries:\n",
    "\n",
    "```\"Korea, Rep.\": \"South Korea\", \n",
    "\"Iran, Islamic Rep.\": \"Iran\",\n",
    "\"Hong Kong SAR, China\": \"Hong Kong\"```\n",
    "\n",
    "<br>\n",
    "\n",
    "Finally, load the [Sciamgo Journal and Country Rank data for Energy Engineering and Power Technology](http://www.scimagojr.com/countryrank.php?category=2102) from the file `scimagojr-3.xlsx`, which ranks countries based on their journal contributions in the aforementioned area. Call this DataFrame **ScimEn**.\n",
    "\n",
    "Join the three datasets: GDP, Energy, and ScimEn into a new dataset (using the intersection of country names). Use only the last 10 years (2006-2015) of GDP data and only the top 15 countries by Scimagojr 'Rank' (Rank 1 through 15). \n",
    "\n",
    "The index of this DataFrame should be the name of the country, and the columns should be ['Rank', 'Documents', 'Citable documents', 'Citations', 'Self-citations',\n",
    "       'Citations per document', 'H index', 'Energy Supply',\n",
    "       'Energy Supply per Capita', '% Renewable', '2006', '2007', '2008',\n",
    "       '2009', '2010', '2011', '2012', '2013', '2014', '2015'].\n",
    "\n",
    "*This function should return a DataFrame with 20 columns and 15 entries.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "def get_data():\n",
    "    \n",
    "     #Read 1st excel, skip footers and headers, remove 2 first columns and rename columns\n",
    "    energy = pd.read_excel('Energy Indicators.xls',skiprows=range(16),skip_footer=38)\n",
    "    energy = energy.drop(labels=['Unnamed: 0','Unnamed: 1'], axis=1)# axis es 0 para fila, 1 para columna\n",
    "    energy = energy.rename(columns={'Unnamed: 2': 'Country','Renewable Electricity Production':'% Renewable','Energy Supply per capita': 'Energy Supply per Capita'})\n",
    "    energy = energy.drop(labels=[0], axis=0)\n",
    "\n",
    "    #Remove digits and '(... parts\n",
    "    energy['Country']=energy['Country'].str.replace(\" \\(.*\\)\",\"\").str.replace('\\d+','')\n",
    "\n",
    "    #Reemplazamoos todos los valores no num√©ricos '...' por np.NaN value\n",
    "    energy['Energy Supply']= pd.to_numeric(energy['Energy Supply'], errors='coerce') \n",
    "    energy['Energy Supply per Capita']= pd.to_numeric(energy['Energy Supply per Capita'], errors='coerce') \n",
    "    energy['Energy Supply']= energy['Energy Supply']*1000000\n",
    "    \n",
    "    #Replace names of countries below:\n",
    "    dicts = {\"Republic of Korea\": \"South Korea\",\n",
    "             \"United States of America\": \"United States\",\n",
    "             \"United Kingdom of Great Britain and Northern Ireland\": \"United Kingdom\",\n",
    "             \"China, Hong Kong Special Administrative Region\": \"Hong Kong\"}\n",
    "\n",
    "    for country in energy['Country']:\n",
    "        if country in dict.keys(dicts):     \n",
    "         energy['Country']=energy['Country'].str.replace(country, dicts[country])\n",
    "\n",
    "\n",
    "    \n",
    "    \n",
    "    #Read 2nd excel\n",
    "    GDP = pd.read_csv('world_bank.csv', skiprows=4)\n",
    "    GDP = GDP.rename(columns={'Country Name': 'Country'})\n",
    "\n",
    "    dicts = {\"Korea, Rep.\": \"South Korea\", \n",
    "            \"Iran, Islamic Rep.\": \"Iran\",\n",
    "            \"Hong Kong SAR, China\": \"Hong Kong\"}\n",
    "         \n",
    "    for country in GDP['Country']:\n",
    "        if country in dict.keys(dicts):     \n",
    "         GDP['Country']=GDP['Country'].str.replace(country, dicts[country])\n",
    "\n",
    "    #Read 3nd excel\n",
    "    ScimEn = pd.read_excel('scimagojr-3.xlsx')\n",
    "    \n",
    "    return energy, GDP, ScimEn\n",
    "\n",
    "\n",
    "\n",
    "def answer_one():\n",
    "    \n",
    "    energy, GDP, ScimEn = get_data()\n",
    "    \n",
    "    #Merging energy and GDP by country name:\n",
    "    df= pd.merge(energy, GDP, how='inner', on='Country')\n",
    "    df= pd.merge(df,ScimEn,how='inner', on='Country')\n",
    "    df= df.set_index('Country')\n",
    "\n",
    "    #Coger solo los 15 primeros del rank\n",
    "    df_filtered=df[df['Rank']<=15]\n",
    "    cols= ['Rank', 'Documents', 'Citable documents', 'Citations', 'Self-citations', 'Citations per document', 'H index', 'Energy Supply', 'Energy Supply per Capita', '% Renewable', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015']\n",
    "    df15 = df_filtered[cols]\n",
    "    \n",
    "    return df15\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2 (6.6%)\n",
    "The previous question joined three datasets then reduced this to just the top 15 entries. When you joined the datasets, but before you reduced this to the top 15 items, how many entries did you lose?\n",
    "\n",
    "*This function should return a single number.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<svg width=\"800\" height=\"300\">\n",
       "  <circle cx=\"150\" cy=\"180\" r=\"80\" fill-opacity=\"0.2\" stroke=\"black\" stroke-width=\"2\" fill=\"blue\" />\n",
       "  <circle cx=\"200\" cy=\"100\" r=\"80\" fill-opacity=\"0.2\" stroke=\"black\" stroke-width=\"2\" fill=\"red\" />\n",
       "  <circle cx=\"100\" cy=\"100\" r=\"80\" fill-opacity=\"0.2\" stroke=\"black\" stroke-width=\"2\" fill=\"green\" />\n",
       "  <line x1=\"150\" y1=\"125\" x2=\"300\" y2=\"150\" stroke=\"black\" stroke-width=\"2\" fill=\"black\" stroke-dasharray=\"5,3\"/>\n",
       "  <text  x=\"300\" y=\"165\" font-family=\"Verdana\" font-size=\"35\">Everything but this!</text>\n",
       "</svg>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%HTML\n",
    "<svg width=\"800\" height=\"300\">\n",
    "  <circle cx=\"150\" cy=\"180\" r=\"80\" fill-opacity=\"0.2\" stroke=\"black\" stroke-width=\"2\" fill=\"blue\" />\n",
    "  <circle cx=\"200\" cy=\"100\" r=\"80\" fill-opacity=\"0.2\" stroke=\"black\" stroke-width=\"2\" fill=\"red\" />\n",
    "  <circle cx=\"100\" cy=\"100\" r=\"80\" fill-opacity=\"0.2\" stroke=\"black\" stroke-width=\"2\" fill=\"green\" />\n",
    "  <line x1=\"150\" y1=\"125\" x2=\"300\" y2=\"150\" stroke=\"black\" stroke-width=\"2\" fill=\"black\" stroke-dasharray=\"5,3\"/>\n",
    "  <text  x=\"300\" y=\"165\" font-family=\"Verdana\" font-size=\"35\">Everything but this!</text>\n",
    "</svg>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def answer_two():\n",
    "    energy, GDP, ScimEn = get_data()\n",
    "    \n",
    "    #Intersection\n",
    "    df_inter= pd.merge(energy, GDP, how='inner', on='Country')\n",
    "    df_inter= pd.merge(df_inter,ScimEn,how='inner', on='Country')\n",
    "\n",
    "    \n",
    "    #Union\n",
    "    df_union= pd.merge(energy, GDP, how='outer', on='Country')\n",
    "    df_union= pd.merge(df_union,ScimEn,how='outer', on='Country')\n",
    "    \n",
    "    \n",
    "    return len(df_union)-len(df_inter)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>\n",
    "\n",
    "Answer the following questions in the context of only the top 15 countries by Scimagojr Rank (aka the DataFrame returned by `answer_one()`)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3 (6.6%)\n",
    "What is the average GDP over the last 10 years for each country?\n",
    "\n",
    "*This function should return a Series named `avgGDP` with 15 countries and their average GDP sorted in descending order.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def avg15(row):\n",
    "    data = row[['2006','2007','2008','2009','2010','2011','2012','2013','2014','2015']]\n",
    "    return pd.Series({'avgGDP': np.mean(data)})\n",
    "\n",
    "def answer_three():\n",
    "    Top15 = answer_one()\n",
    "    avgTop15 = Top15.apply(avg15, axis=1).sort_values('avgGDP',ascending=False)\n",
    "    return avgTop15['avgGDP']\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 4 (6.6%)\n",
    "By how much had the GDP changed over the 10 year span for the country with the 6th largest average GDP?\n",
    "\n",
    "*This function should return a single number.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def answer_four():\n",
    "    \n",
    "    cols= ['2006','2015']\n",
    "    Top15 = answer_one()\n",
    "    avgTop= answer_three()\n",
    "    country6= avgTop.index[5]\n",
    "    maxx = Top15[cols].max(axis=1)\n",
    "    minn = Top15[cols].min(axis=1)\n",
    "    diff= np.abs(maxx-minn)\n",
    "    return diff[country6]\n",
    "\n",
    " \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 5 (6.6%)\n",
    "What is the mean energy supply per capita?\n",
    "\n",
    "*This function should return a single number.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def answer_five():\n",
    "    Top15 = answer_one()\n",
    "    \n",
    "    return np.mean(Top15['Energy Supply per Capita'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 6 (6.6%)\n",
    "What country has the maximum % Renewable and what is the percentage?\n",
    "\n",
    "*This function should return a tuple with the name of the country and the percentage.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def answer_six():\n",
    "    Top15 = answer_one()\n",
    "    return (Top15[Top15['% Renewable']==Top15['% Renewable'].max()].index[0],Top15['% Renewable'].max())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 7 (6.6%)\n",
    "Create a new column that is the ratio of Self-Citations to Total Citations. \n",
    "What is the maximum value for this new column, and what country has the highest ratio?\n",
    "\n",
    "*This function should return a tuple with the name of the country and the ratio.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def answer_seven():\n",
    "    Top15 = answer_one()\n",
    "    Top15['Ratio'] = Top15['Self-citations']/Top15['Citations']\n",
    "    return (Top15[Top15['Ratio']==Top15['Ratio'].max()].index[0],Top15['Ratio'].max())\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 8 (6.6%)\n",
    "\n",
    "Create a column that estimates the population using Energy Supply and Energy Supply per capita. \n",
    "What is the third most populous country according to this estimate?\n",
    "\n",
    "*This function should return a single string value.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def answer_eight():\n",
    "    Top15= answer_one()\n",
    "    Top15['PopEst'] = Top15['Energy Supply']/Top15['Energy Supply per Capita']\n",
    "    return Top15['PopEst'].sort_values(0,ascending=False).index[2] \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 9\n",
    "Create a column that estimates the number of citable documents per person. \n",
    "What is the correlation between the number of citable documents per capita and the energy supply per capita? Use the `.corr()` method, (Pearson's correlation).\n",
    "\n",
    "*This function should return a single number.*\n",
    "\n",
    "*(Optional: Use the built-in function `plot9()` to visualize the relationship between Energy Supply per Capita vs. Citable docs per Capita)*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def answer_nine():\n",
    "    Top15 = answer_one()\n",
    "    Top15['PopEst'] = Top15['Energy Supply']/Top15['Energy Supply per Capita']\n",
    "    Top15['Citable docs per Capita'] = Top15['Citable documents'] / Top15['PopEst']\n",
    "    return Top15['Citable docs per Capita'].corr(Top15['Energy Supply per Capita'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def plot9():\n",
    "    import matplotlib as plt\n",
    "    %matplotlib inline\n",
    "    \n",
    "    Top15 = answer_one()\n",
    "    Top15['PopEst'] = Top15['Energy Supply'] / Top15['Energy Supply per Capita']\n",
    "    Top15['Citable docs per Capita'] = Top15['Citable documents'] / Top15['PopEst']\n",
    "    Top15.plot(x='Citable docs per Capita', y='Energy Supply per Capita', kind='scatter', xlim=[0, 0.0006])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#plot9() # Be sure to comment out plot9() before submitting the assignment!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 10 (6.6%)\n",
    "Create a new column with a 1 if the country's % Renewable value is at or above the median for all countries in the top 15, and a 0 if the country's % Renewable value is below the median.\n",
    "\n",
    "*This function should return a series named `HighRenew` whose index is the country name sorted in ascending order of rank.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def answer_ten():\n",
    "    Top15=answer_one()\n",
    "    med= Top15['% Renewable'].median()\n",
    "    Top15['HighRenew']= Top15['% Renewable'] >= med\n",
    "    x=Top15.sort_values('Rank',ascending=True)\n",
    "    return x['HighRenew']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 11 (6.6%)\n",
    "Use the following dictionary to group the Countries by Continent, then create a dateframe that displays the sample size (the number of countries in each continent bin), and the sum, mean, and std deviation for the estimated population of each country.\n",
    "\n",
    "```python\n",
    "ContinentDict  = {'China':'Asia', \n",
    "                  'United States':'North America', \n",
    "                  'Japan':'Asia', \n",
    "                  'United Kingdom':'Europe', \n",
    "                  'Russian Federation':'Europe', \n",
    "                  'Canada':'North America', \n",
    "                  'Germany':'Europe', \n",
    "                  'India':'Asia',\n",
    "                  'France':'Europe', \n",
    "                  'South Korea':'Asia', \n",
    "                  'Italy':'Europe', \n",
    "                  'Spain':'Europe', \n",
    "                  'Iran':'Asia',\n",
    "                  'Australia':'Australia', \n",
    "                  'Brazil':'South America'}\n",
    "```\n",
    "\n",
    "*This function should return a DataFrame with index named Continent `['Asia', 'Australia', 'Europe', 'North America', 'South America']` and columns `['size', 'sum', 'mean', 'std']`*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'answer_one' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-7b2c222be715>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mTop15\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Continent'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'PopEst'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0magg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'size'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'sum'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'mean'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'std'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m \u001b[0manswer_eleven\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-1-7b2c222be715>\u001b[0m in \u001b[0;36manswer_eleven\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0manswer_eleven\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m     \u001b[0mTop15\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0manswer_one\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m     \u001b[0mTop15\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'PopEst'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTop15\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Energy Supply'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mTop15\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Energy Supply per Capita'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m     \u001b[0mTop15\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Continent'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'answer_one' is not defined"
     ]
    }
   ],
   "source": [
    "ContinentDict  = {'China':'Asia', \n",
    "                  'United States':'North America', \n",
    "                  'Japan':'Asia', \n",
    "                  'United Kingdom':'Europe', \n",
    "                  'Russian Federation':'Europe', \n",
    "                  'Canada':'North America', \n",
    "                  'Germany':'Europe', \n",
    "                  'India':'Asia',\n",
    "                  'France':'Europe', \n",
    "                  'South Korea':'Asia', \n",
    "                  'Italy':'Europe', \n",
    "                  'Spain':'Europe', \n",
    "                  'Iran':'Asia',\n",
    "                  'Australia':'Australia', \n",
    "                  'Brazil':'South America'}\n",
    "\n",
    "def answer_eleven():\n",
    "    \n",
    "    Top15 = answer_one()\n",
    "    Top15['PopEst'] = Top15['Energy Supply'] / Top15['Energy Supply per Capita']\n",
    "    Top15['Continent'] = np.nan\n",
    "    for country in Top15.index:\n",
    "        if country in dict.keys(ContinentDict):     \n",
    "         Top15['Continent'].loc[country]= ContinentDict[country]\n",
    "    \n",
    "    return Top15.groupby('Continent')['PopEst'].agg(['size', 'sum','mean','std'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 12 (6.6%)\n",
    "Cut % Renewable into 5 bins. Group Top15 by the Continent, as well as these new % Renewable bins. How many countries are in each of these groups?\n",
    "\n",
    "*This function should return a Series with a MultiIndex of `Continent`, then the bins for `% Renewable`. Do not include groups with no countries.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.5/site-packages/pandas/core/indexing.py:132: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self._setitem_with_indexer(indexer, value)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Continent      % Renewable     \n",
       "Asia           (2.212, 15.753]     4\n",
       "               (15.753, 29.227]    1\n",
       "Australia      (2.212, 15.753]     1\n",
       "Europe         (2.212, 15.753]     1\n",
       "               (15.753, 29.227]    3\n",
       "               (29.227, 42.701]    2\n",
       "North America  (2.212, 15.753]     1\n",
       "               (56.174, 69.648]    1\n",
       "South America  (56.174, 69.648]    1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def answer_twelve():\n",
    "    Top15 = answer_one()\n",
    "    Top15['Continent'] = np.nan\n",
    "    for country in Top15.index:\n",
    "        if country in dict.keys(ContinentDict):     \n",
    "         Top15['Continent'].loc[country]= ContinentDict[country]\n",
    "        \n",
    "    Top15['bin']= pd.cut(Top15['% Renewable'],5)\n",
    "    return Top15.groupby(['Continent', pd.cut(Top15['% Renewable'], 5)]).size()\n",
    "answer_tw"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 13 (6.6%)\n",
    "Convert the Population Estimate series to a string with thousands separator (using commas). Do not round the results.\n",
    "\n",
    "e.g. 317615384.61538464 -> 317,615,384.61538464\n",
    "\n",
    "*This function should return a Series `PopEst` whose index is the country name and whose values are the population estimate string.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def answer_thirteen():\n",
    "    Top15 = answer_one()\n",
    "    Top15['PopEst'] = Top15['Energy Supply'] / Top15['Energy Supply per Capita']    \n",
    "    return Top15['PopEst'].apply(lambda x: '{:,}'.format(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Optional\n",
    "\n",
    "Use the built in function `plot_optional()` to see an example visualization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def plot_optional():\n",
    "    import matplotlib as plt\n",
    "    %matplotlib inline\n",
    "    Top15 = answer_one()\n",
    "    ax = Top15.plot(x='Rank', y='% Renewable', kind='scatter', \n",
    "                    c=['#e41a1c','#377eb8','#e41a1c','#4daf4a','#4daf4a','#377eb8','#4daf4a','#e41a1c',\n",
    "                       '#4daf4a','#e41a1c','#4daf4a','#4daf4a','#e41a1c','#dede00','#ff7f00'], \n",
    "                    xticks=range(1,16), s=6*Top15['2014']/10**10, alpha=.75, figsize=[16,6]);\n",
    "\n",
    "    for i, txt in enumerate(Top15.index):\n",
    "        ax.annotate(txt, [Top15['Rank'][i], Top15['% Renewable'][i]], ha='center')\n",
    "\n",
    "    print(\"This is an example of a visualization that can be created to help understand the data. \\\n",
    "This is a bubble chart showing % Renewable vs. Rank. The size of the bubble corresponds to the countries' \\\n",
    "2014 GDP, and the color corresponds to the continent.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.5/site-packages/matplotlib/font_manager.py:273: UserWarning: Matplotlib is building the font cache using fc-list. This may take a moment.\n",
      "  warnings.warn('Matplotlib is building the font cache using fc-list. This may take a moment.')\n",
      "/opt/conda/lib/python3.5/site-packages/matplotlib/font_manager.py:273: UserWarning: Matplotlib is building the font cache using fc-list. This may take a moment.\n",
      "  warnings.warn('Matplotlib is building the font cache using fc-list. This may take a moment.')\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is an example of a visualization that can be created to help understand the data. This is a bubble chart showing % Renewable vs. Rank. The size of the bubble corresponds to the countries' 2014 GDP, and the color corresponds to the continent.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nr0lNTaW8vBydTkfz5s3JLcrFuZUTRdmFuAa5VqtKtHWxISf50jVjVNuoGbnkqaqOkf9+fHZiDhkn\nLrBn2b6qYyaTCaPBiEFrIDc1F3t3u2q93nwa+1Q7f3ZSNvnp+cx76AMMegOj9o1i3LhxaLVakpKS\nqpKRMTExV0z4PXToEDNnzuTo0aPk5+djMlVWuqWmplZt5b6eM2fOoFQqad26ddUxZ2dnIiIiOH36\ndNUxa2vrasliLy8vsrOzb2iNhkyn08HfVYWdhk5hzbvPsOrNp7in9yhc/EIRBBnZKScpyDyPe2A0\nvo1a4xHSmE0fTaHtwPE4evhTWpDD+WN7CW7ZGbeAG/v/cqMcPPyI37eRtBP7sXPzJmHvRrJTTmHv\n5nP9B/9HVKferJwxCBDoN30xUPl6l8nlaLXaWo37v77++ms27NhAqxEt60Ui8rKo+yPRlemY+/Fc\nQkNDadWqVZ2uf+L0Cey9a25Lk7gnkbndFlR9HdIumH4zK3uSuvi70PmZTtXu33rgPVX/dvCwp9PT\nHdn20R/VkpEmg4mHp3TH3r3y4kXLfi048P2Bqtv3Lt9HuyFtaNmvRdWxyxWs54+kkpOcwwtrn6tK\nnnZ57gESdp0lfkcCTR7+p7JWqVGicbEiISGB7t2739w3RSKRSCQSyV1FSkZaSEREBCq5mrzUXKxj\n7s5trLpyHQm//UWfMAEvx7p9KRoq9GjUahRShZ3ZdGvszA+HzrH488+YM29+1fHi4mIOHDjA7t27\nid2+nZK8PMTyctxkMgJkcsLUalqrVDhb2WCvVKKUyZAJYBRFdCYTBTodeZfyyLuQSc7BWH406CmR\nyRGsNHj4+9P+gQfo0KEDzZo1kyYL3wIbG5uqipYlS5bQtGlTvv76a0aMGAFQNZTo3xWMer2+2jlG\njhxJ9+7d2bBhA1u2bOG9995j3rx5jB8/nu7du5Oamspvv/3G1q1b6dKlC8899xyzZ8++IpaVK1fy\n0ksvsWDBAtq2bYudnR2zZ89mz5496GQ6/P18OHfoHDLFf3+Orxzu8l+CIOB4lYEQunIdnUZ2JOK+\niCtuk6tu7HeGrlyPV6QnfV7rxYmtp1CkKlm8qDIR5Ob2T1LGxqb6hZiysjK6d+9Ojx49+O6773Bz\nc+P8+fN0797dLFVs//0ZqWkwzp3IYDAgCJX/L+3dfRj4xjcc3rCUA6sXUZqXjVypxMk7iGY9htHo\n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\nDocDm81GQEAAcXFxJCUl0bZtW0JDq3fzGxERkfpGxchKUDFSquq3AuXGjRvJzs4mJyeHnJwc9mXv\nIndvNvv2ZuN0lAEWWFbFfwEwYAwYGyGh4UQ3jqFRk1gaNoqhUaNGREdH07x5c5KSkoiOjtbIRxER\nERERERGp1U62GOn9he9E6hFjDC1atKBFixZHfdyyLEpLS3E6nbjdblwuFzabDbvdjt1uJyAggKCg\nIC+nFhERERERERHxDRUjRWqQMYaQkBBfxxARERERERERqRVsvg4gIiIiIiIiIiIipwcVI0VERERE\nRERERMQrVIwUERERERERERERr1AxUkRERERERERERLxCxUgRERERERERERHxChUjRURERERERERE\nxCtUjBQRERERERERERGvUDFSREREREREREREvELFSBEREREREREREfEKFSNFRERERERERETEK1SM\nFBEREREREREREa9QMVJERERERERERES8QsVIERERERERERER8QoVI0VERERERERERMQrVIwUERER\nERERERERr1AxUkRERERERERERLxCxUgRERERERERERHxChUjRURERERERERExCtUjBQRERERERER\nERGvUDFSREREREREREREvELFSBEREREREREREfEKFSNFRERERERERETEK1SMFBEREREREREREa9Q\nMVJERERERERERES8QsVIERERERERERER8QoVI0VERERERERERMQrVIwUERERERERERERr1AxUkRE\nRERERERERLxCxUgRERERERERERHxChUjRURERERERERExCtUjBQRERERERERERGvUDFSRERERERE\nREREvELFSBEREREREREREfEKFSNFRERERERERETEK1SMFBEREREREREREa+oU8VIY8xkY8wSY0yx\nMSb3GOfEG2M+O3BOljHmCWNMnXqddcWsWbN8HaFOUr9VnvqsatRvlac+qxr1W+Wpz6pG/VZ56rOq\nUb9VnvqsatRvlac+qxr1W+Wpz2pOXSvS+QOzgZeO9uCBouN8wA/oA/wV+D/gQS/lO63oG7Nq1G+V\npz6rGvVb5anPqkb9Vnnqs6pRv1We+qxq1G+Vpz6rGvVb5anPqkb9Vnnqs5pTp4qRlmX907Ks54A1\nxzhlKJAMXGVZ1hrLsr4ApgDjjTF+3sopIiIiIiIiIiIiR6pTxciT0AdYY1nWvkOOfQFEAh19E0lE\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f60c3b02470>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot_optional() # Be sure to comment out plot_optional() before submitting the assignment!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "coursera": {
   "course_slug": "python-data-analysis",
   "graded_item_id": "zAr06",
   "launcher_item_id": "KSSjT",
   "part_id": "SL3fU"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
